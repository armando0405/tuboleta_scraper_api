
  # ============================================
  # CONFIGURACIÓN PARA PRODUCCIÓN
  # ============================================
  # Usar con: SPRING_PROFILES_ACTIVE=prod
  # O en Docker: CMD ["java", "-Dspring.profiles.active=prod", "-jar", "app.jar"]

  server:
    port: ${PORT:8080}

  spring:
    datasource:
      url: jdbc:h2:file:/app/data/tuboleta_scraper_prod
      driver-class-name: org.h2.Driver
      username: sa
      password: ${H2_PASSWORD:}

    #  h2:
    #    console:
    #      enabled: false

    h2:
      console:
        enabled: true
        path: /h2-console
        settings:
          web-allow-others: true

    jpa:
      hibernate:
        ddl-auto: create
      show-sql: false
      properties:
        hibernate:
          format_sql: false

    # ============================================
    #  CONFIGURACIÓN SENDGRID
    # ============================================
    mail:
      host: smtp.sendgrid.net
      port: 587
      username: apikey  # ← LITERAL "apikey" (no cambiar)
      password: ${SENDGRID_API_KEY}  # ← Variable de entorno
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
              required: true
            connectiontimeout: 15000
            timeout: 15000
            writetimeout: 15000
          debug: false
      default-encoding: UTF-8

  notifications:
    email:
      enabled: ${EMAIL_NOTIFICATIONS_ENABLED:true}
      # ⚠️ DEBE SER EL EMAIL VERIFICADO EN SENDGRID
      from: ${EMAIL_FROM:armandomorenoalvarez5@gmail.com}
      to: ${EMAIL_TO:iu443805@gmail.com}
      retry:
        max-attempts: 3
        delay-seconds: 30

  scraping:
    tuboleta:
      timeout: ${SCRAPING_TIMEOUT:15000}

  scheduler:
    monitoring:
      enabled: ${SCHEDULER_ENABLED:true}
      interval-minutes: ${SCHEDULER_INTERVAL:15}
      initial-delay-minutes: ${SCHEDULER_INITIAL_DELAY:2}

  keepalive:
    interval-minutes: 10
    initial-delay-minutes: 10
    url: ${RENDER_EXTERNAL_URL:http://localhost:8080}

  logging:
    level:
      root: INFO
      com.armando0405.tuboletascraper: INFO
      com.armando0405.tuboletascraper.scheduler: INFO
      com.armando0405.tuboletascraper.service: INFO
      org.springframework: WARN
      org.hibernate: WARN
      org.apache: WARN
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
    endpoint:
      health:
        show-details: when-authorized